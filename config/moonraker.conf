[server]
host: 0.0.0.0
port: 7125
klippy_uds_address: {data_path}/comms/klippy.sock

[authorization]
trusted_clients:
    10.0.0.0/8
    127.0.0.0/8
    169.254.0.0/16
    172.16.0.0/12
    192.168.0.0/16
    FE80::/10
    ::1/128
cors_domains:
    *.lan
    *.local
    *://localhost
    *://localhost:*
    *://my.mainsail.xyz
    *://app.fluidd.xyz

[octoprint_compat]

[firmware_manager]

[mqtt]
address: device.creatbot.com
port: 8883
enable_tls: True
mqtt_protocol: v5
api_qos: 2
enable_moonraker_api: True

[creatcloud]

[webrtc_bridge]

[webcam Camera]
stream_url: /webrtc/stream.html?src=Camera
snapshot_url: /api/frame.jpeg?src=Camera
service: webrtc-go2rtc
rotation: 0
aspect_ratio: 16:9
overwrite: True

[history]

[power Printer]
type: gpio
pin: gpiochip4/gpio13
initial_state: on
off_when_shutdown: true
off_when_shutdown_delay: 86400
on_when_job_queued: true
locked_while_printing: true
restart_klipper_when_powered: true
# restart_delay: 1
bound_services:
  klipper
  KlipperScreen

[button switch_button]
type: gpio
pin: ^gpiochip4/gpio12
debounce_period: .02
minimum_event_time: 0
on_press:
  {% if event.elapsed_time > 5.0 %}
    {% do call_method("machine.shutdown") %}
  {% endif %}
on_release:
  {% do call_method("machine.device_power.post_device", device="Printer", action="toggle") %}

[button power_outage]
type: gpio
pin: ^!gpiochip4/gpio19
debounce_period: .01
minimum_event_time: 0
on_press:
    {% do call_method("printer.gcode.script", script="TURN_OFF_HEATERS") %}
    {% do call_method("printer.gcode.script", script="GET_TASKLINE") %}
    {% set query_objs = {"print_stats": ["state"], "toolhead": ["extruder"], "virtual_sdcard": ["file_path", "file_position", "file_line"]} %}
    {% set status = call_method("printer.objects.query", objects=query_objs) %}
    {% do call_method("printer.emergency_stop") %}
    {% set data = status | tojson | fromjson %}
    {% set print_state = data['status']['print_stats']['state'] %}
    # Judging the printer status
    {% if print_state | string == 'printing' or print_state | string == 'paused' %}
        {% set hotend = data['status']['toolhead']['extruder'] %}
        {% set position = data['status']['virtual_sdcard']['file_position'] %}
        {% set line = data['status']['virtual_sdcard']['file_line'] %}
        {% set filepath = data['status']['virtual_sdcard']['file_path'] %}
        # save file position and line
        {% do call_method("printer.gcode.script", script="SAVE_VARIABLE VARIABLE=power_resume_position VALUE=" + position | string) %}
        {% do call_method("printer.gcode.script", script="SAVE_VARIABLE VARIABLE=power_resume_line VALUE=" + line | string) %}
        {% set script = "SAVE_VARIABLE VARIABLE=power_loss_paused VALUE=" ~ ("False" if print_state | string == 'printing' else "True") %}
        {% if print_state | string in ['printing', 'paused'] %}
            {% do call_method("printer.gcode.script", script=script) %}
        {% endif %}
        # save extruder
        {% do call_method("printer.gcode.script", script="SAVE_VARIABLE VARIABLE=power_resume_extruder VALUE=\"'" + hotend | string + "'\"") %}
        # save file
        {% do call_method("printer.gcode.script", script="SAVE_VARIABLE VARIABLE=filepath VALUE=\"'" + filepath | string + "'\"") %}
        save interrupt
        {% do call_method("printer.gcode.script", script="SAVE_VARIABLE VARIABLE=was_interrupted VALUE=True") %}
    {% else %}
        {% do call_method("printer.gcode.script", script="SAVE_VARIABLE VARIABLE=was_interrupted VALUE=False") %}
    {% endif %}
    # shutdown
    {% do call_method("machine.shutdown") %}

[update_manager]
channel: stable
refresh_interval: 168

[update_manager klipper]
channel: stable

[update_manager KlipperScreen]
type: git_repo
path: /home/klipper/KlipperScreen
origin: https://github.com/CreatBotOfficail/CreatBotKlipperScreen.git
env: /home/klipper/.KlipperScreen-env/bin/python
requirements: scripts/KlipperScreen-requirements.txt
install_script: scripts/KlipperScreen-install.sh
channel: stable

[update_manager mainsail-config]
type: git_repo
primary_branch: master
path: ~/mainsail-config
origin: https://github.com/mainsail-crew/mainsail-config.git
managed_services: klipper

[update_manager mainsail]
type: web
channel: stable
repo: mainsail-crew/mainsail
path: ~/mainsail

[update_manager go2rtc]
type: zip
channel: stable
repo: CreatBotOfficail/go2rtc
path: ~/go2rtc
install_cmd: install-creatcloud.sh
is_system_service: true
